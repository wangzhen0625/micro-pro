https://github.com/emicklei/go-restful

先定义结构体，然后数据都通过结构体操作
实例地址
	https://github.com/emicklei/go-restful/blob/master/examples/restful-user-resource.go

Path			Service					Service Path
/foo/bar		go.micro.api.foo		/foo/bar
/greeter		go.micro.api.greeter	/greeter
/greeter/:name	go.micro.api.greeter	/greeter/:name

/v1/test		go.micro.api.v1.test	/test



ws.Path("/v1/rest")和web.Name("go.micro.api.v1.rest")必须一致


ReadEntity获取form提交的参数

WriteEntity将结构体返回到页面

PathParameter() 解析请求路径的参数
name := req.QueryParameter("name")  ip/aa?name=xx  
pid := req.QueryParameter("pid")  /userPwdLogin/{pid}/test/{id}
test, _ := req.BodyParameter("name")  ???
test2 := req.HeaderParameter("name") 头信息


WriteHeader 修改响应头

因为代码强制使用json，所以请求需要指定头信息：headers={'content-type': 'application/json'}

默认的ajax请求是application/x-www-form-urlencoded，可以传对象。
但是application/json只能跟字符串
contentType: "application/json; charset=utf-8",
data:JSON.stringify(data),


func (self UserResource) FindUsersByName(response restful.ResponseBuilder, name restful.QueryParam) {
    users := []User{} // select from User where name  = ?
    response.StatusOK()
    response.AddHeader(restful.HeaderLastModified, time.Now().Add(time.Duration(1000)))
    response.Entity(users)
}


w.AddHeader("Location", u.Path+"/"+k.Encode())

// Return the resultant entity.
w.WriteHeader(http.StatusCreated)
w.WriteEntity(p)



rest设计要求：
1、https协议
2、域名访问
3、API的版本号放入URL
4、每个网址代表一种资源（resource）集合，使用复数
5、HTTP动词，使用PATCH不使用PUT
	GET（SELECT）：从服务器取出资源（一项或多项）。
	POST（CREATE）：在服务器新建一个资源。
	PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。
	PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。
	DELETE（DELETE）：从服务器删除资源。

	GET /zoos：列出所有动物园
	GET /zoos/ID：获取某个指定动物园的信息
	GET /zoos/ID/animals：列出某个指定动物园的所有动物
	POST /zoos：新建一个动物园
	PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）
	PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）
	DELETE /zoos/ID：删除某个动物园
	DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物
6、过滤信息
允许API路径和URL参数偶尔有重复
	?limit=10：指定返回记录的数量
	?offset=10：指定返回记录的开始位置。
	?page=2&per_page=100：指定第几页，以及每页的记录数。
	?sortby=name&order=asc：指定返回结果按照哪个属性排序，以及排序顺序。
	?animal_type_id=1：指定筛选条件
7、状态码
	200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。
	201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。
	202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）
	204 NO CONTENT - [DELETE]：用户删除数据成功。
	400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。
	401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。
	403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。
	404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。
	406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。
	410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。
	422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。
	500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。

8、错误处理
	{
	    error: "Invalid API key"
	}
9、返回结果
	GET /collection：返回资源对象的列表（数组）
	GET /collection/resource：返回单个资源对象
	POST /collection：返回新生成的资源对象
	PUT /collection/resource：返回完整的资源对象
	PATCH /collection/resource：返回完整的资源对象
	DELETE /collection/resource：返回一个空文档	
10、返回结果中提供链接 Hypermedia API
临时可以设计一个api专门返回所有的uri
{
	"link1":
	{
		"rel":   "collection https://www.example.com/zoos",
		"href":  "https://api.example.com/zoos",
		"title": "List of zoos",
		"type":  "application/vnd.yourformat+json"
	},
	link2:{

	}
}

11、API的身份认证应该使用OAuth 2.0框架
openID Connect

12、服务器返回的数据格式，使用JSON