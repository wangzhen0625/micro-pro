1、初始化
使用micro.NewFunction创建一个函数。
import "github.com/micro/go-micro"

function := micro.NewFunction() 

可以在创建期间传递选项。
function := micro.NewFunction(
        micro.Name("greeter"),
        micro.Version("latest"),
)
Go Micro还提供了一种使用micro.Flags设置命令行标志的方法。


2、定义API
我们使用protobuf文件来定义API接口。 这是一种非常方便的方式来严格定义API并为服务器和客户端提供具体的类型。

这是一个示例定义。

greeter.proto

syntax = "proto3";

service Greeter {
	rpc Hello(HelloRequest) returns (HelloResponse) {}
}

message HelloRequest {
	string name = 1;
}

message HelloResponse {
	string greeting = 2;
}
这里我们定义一个名为Greeter的函数处理程序，方法Hello使用参数HelloRequest类型并返回HelloResponse


3、生成API接口
我们使用protoc和protoc-gen-go来为这个定义生成具体的执行。

Go-micro使用代码生成来提供客户端存根方法来减少锅炉板代码，就像gRPC一样。 这是通过一个protobuf插件完成的，需要一个golang / protobuf的fork，可以在这里找到github.com/micro/protobuf。
go get github.com/micro/protobuf/{proto,protoc-gen-go}
protoc --go_out=plugins=micro:. greeter.proto
生成的类型现在可以在进行请求时在服务器或客户端的处理程序中导入和使用。


4、实现处理程序
服务器要求处理程序被注册以提供请求。 处理程序是一种公共类型，具有符合签名的公共方法
func(ctx context.Context, req interface{}, rsp interface{}) error.
如上所述，Greeter 接口的处理程序签名如下所示。
type GreeterHandler interface {
        Hello(context.Context, *HelloRequest, *HelloResponse) error
}

这是Greeter处理程序的一个实现。
import proto "github.com/micro/examples/service/proto"

type Greeter struct{}

func (g *Greeter) Hello(ctx context.Context, req *proto.HelloRequest, rsp *proto.HelloResponse) error {
	rsp.Greeting = "Hello " + req.Name
	return nil
}
处理程序注册很像http.Handler。
function := micro.NewFunction(
	micro.Name("greeter"),
)

proto.RegisterGreeterHandler(service.Server(), new(Greeter))
或者，功能界面提供了更简单的注册模式。
function := micro.NewFunction(
        micro.Name("greeter"),
)

function.Handle(new(Greeter))

您也可以使用Subscribe方法注册异步订户


5、运行
该函数可以通过调用function.Run来运行。 这导致它绑定到配置中的地址（默认为找到的第一个RFC1918接口和随机端口）并监听请求。

这将在启动时注册该注册表，并在发出kill信号时注销Deregister。
if err := function.Run(); err != nil {
	log.Fatal(err)
}
服务请求后，功能将退出。 您可以使用micro run来管理功能的生命周期。 一个完整的例子可以在examples / function中找到


6、完整的例子
greeter.go

package main

import (
        "log"

        "github.com/micro/go-micro"
        proto "github.com/micro/examples/function/proto"

        "golang.org/x/net/context"
)

type Greeter struct{}

func (g *Greeter) Hello(ctx context.Context, req *proto.HelloRequest, rsp *proto.HelloResponse) error {
        rsp.Greeting = "Hello " + req.Name
        return nil
}

func main() {
        function := micro.NewFunction(
                micro.Name("greeter"),
                micro.Version("latest"),
        )

        function.Init()

	function.Handle(new(Greeter))
	
        if err := function.Run(); err != nil {
                log.Fatal(err)
        }
}