// Code generated by protoc-gen-go. DO NOT EDIT.
// source: application.proto

/*
Package go_micro_srv_v1_app is a generated protocol buffer package.

It is generated from these files:
	application.proto

It has these top-level messages:
	AppReq
	AppRsp
*/
package go_micro_srv_v1_app

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AppReq struct {
	Id     uint64 `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Desc   string `protobuf:"bytes,3,opt,name=Desc" json:"Desc,omitempty"`
	Status uint64 `protobuf:"varint,4,opt,name=Status" json:"Status,omitempty"`
}

func (m *AppReq) Reset()                    { *m = AppReq{} }
func (m *AppReq) String() string            { return proto.CompactTextString(m) }
func (*AppReq) ProtoMessage()               {}
func (*AppReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AppReq) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AppReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AppReq) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *AppReq) GetStatus() uint64 {
	if m != nil {
		return m.Status
	}
	return 0
}

type AppRsp struct {
	Id     uint64 `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Desc   string `protobuf:"bytes,3,opt,name=Desc" json:"Desc,omitempty"`
	Status uint64 `protobuf:"varint,4,opt,name=Status" json:"Status,omitempty"`
}

func (m *AppRsp) Reset()                    { *m = AppRsp{} }
func (m *AppRsp) String() string            { return proto.CompactTextString(m) }
func (*AppRsp) ProtoMessage()               {}
func (*AppRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AppRsp) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AppRsp) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AppRsp) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *AppRsp) GetStatus() uint64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*AppReq)(nil), "go.micro.srv.v1.app.AppReq")
	proto.RegisterType((*AppRsp)(nil), "go.micro.srv.v1.app.AppRsp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for App service

type AppClient interface {
	AppIndex(ctx context.Context, in *AppReq, opts ...client.CallOption) (App_AppIndexClient, error)
	AppRead(ctx context.Context, in *AppReq, opts ...client.CallOption) (*AppRsp, error)
	AppSave(ctx context.Context, in *AppReq, opts ...client.CallOption) (*AppRsp, error)
	AppPatch(ctx context.Context, in *AppReq, opts ...client.CallOption) (*AppRsp, error)
	AppDelete(ctx context.Context, in *AppReq, opts ...client.CallOption) (*AppRsp, error)
}

type appClient struct {
	c           client.Client
	serviceName string
}

func NewAppClient(serviceName string, c client.Client) AppClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.v1.app"
	}
	return &appClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *appClient) AppIndex(ctx context.Context, in *AppReq, opts ...client.CallOption) (App_AppIndexClient, error) {
	req := c.c.NewRequest(c.serviceName, "App.AppIndex", &AppReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &appAppIndexClient{stream}, nil
}

type App_AppIndexClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*AppRsp, error)
}

type appAppIndexClient struct {
	stream client.Streamer
}

func (x *appAppIndexClient) Close() error {
	return x.stream.Close()
}

func (x *appAppIndexClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *appAppIndexClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *appAppIndexClient) Recv() (*AppRsp, error) {
	m := new(AppRsp)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *appClient) AppRead(ctx context.Context, in *AppReq, opts ...client.CallOption) (*AppRsp, error) {
	req := c.c.NewRequest(c.serviceName, "App.AppRead", in)
	out := new(AppRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AppSave(ctx context.Context, in *AppReq, opts ...client.CallOption) (*AppRsp, error) {
	req := c.c.NewRequest(c.serviceName, "App.AppSave", in)
	out := new(AppRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AppPatch(ctx context.Context, in *AppReq, opts ...client.CallOption) (*AppRsp, error) {
	req := c.c.NewRequest(c.serviceName, "App.AppPatch", in)
	out := new(AppRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AppDelete(ctx context.Context, in *AppReq, opts ...client.CallOption) (*AppRsp, error) {
	req := c.c.NewRequest(c.serviceName, "App.AppDelete", in)
	out := new(AppRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for App service

type AppHandler interface {
	AppIndex(context.Context, *AppReq, App_AppIndexStream) error
	AppRead(context.Context, *AppReq, *AppRsp) error
	AppSave(context.Context, *AppReq, *AppRsp) error
	AppPatch(context.Context, *AppReq, *AppRsp) error
	AppDelete(context.Context, *AppReq, *AppRsp) error
}

func RegisterAppHandler(s server.Server, hdlr AppHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&App{hdlr}, opts...))
}

type App struct {
	AppHandler
}

func (h *App) AppIndex(ctx context.Context, stream server.Streamer) error {
	m := new(AppReq)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.AppHandler.AppIndex(ctx, m, &appAppIndexStream{stream})
}

type App_AppIndexStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*AppRsp) error
}

type appAppIndexStream struct {
	stream server.Streamer
}

func (x *appAppIndexStream) Close() error {
	return x.stream.Close()
}

func (x *appAppIndexStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *appAppIndexStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *appAppIndexStream) Send(m *AppRsp) error {
	return x.stream.Send(m)
}

func (h *App) AppRead(ctx context.Context, in *AppReq, out *AppRsp) error {
	return h.AppHandler.AppRead(ctx, in, out)
}

func (h *App) AppSave(ctx context.Context, in *AppReq, out *AppRsp) error {
	return h.AppHandler.AppSave(ctx, in, out)
}

func (h *App) AppPatch(ctx context.Context, in *AppReq, out *AppRsp) error {
	return h.AppHandler.AppPatch(ctx, in, out)
}

func (h *App) AppDelete(ctx context.Context, in *AppReq, out *AppRsp) error {
	return h.AppHandler.AppDelete(ctx, in, out)
}

func init() { proto.RegisterFile("application.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 228 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0x2c, 0x28, 0xc8,
	0xc9, 0x4c, 0x4e, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x4e,
	0xcf, 0xd7, 0xcb, 0xcd, 0x4c, 0x2e, 0xca, 0xd7, 0x2b, 0x2e, 0x2a, 0xd3, 0x2b, 0x33, 0xd4, 0x4b,
	0x2c, 0x28, 0x50, 0x8a, 0xe0, 0x62, 0x73, 0x2c, 0x28, 0x08, 0x4a, 0x2d, 0x14, 0xe2, 0xe3, 0x62,
	0xf2, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x09, 0x62, 0xf2, 0x4c, 0x11, 0x12, 0xe2, 0x62,
	0xf1, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x41, 0x62, 0x2e,
	0xa9, 0xc5, 0xc9, 0x12, 0xcc, 0x10, 0x31, 0x10, 0x5b, 0x48, 0x8c, 0x8b, 0x2d, 0xb8, 0x24, 0xb1,
	0xa4, 0xb4, 0x58, 0x82, 0x05, 0xac, 0x17, 0xca, 0x83, 0x99, 0x5c, 0x5c, 0x40, 0x6d, 0x93, 0x8d,
	0xde, 0x31, 0x71, 0x31, 0x3b, 0x16, 0x14, 0x08, 0x79, 0x70, 0x71, 0x38, 0x16, 0x14, 0x78, 0xe6,
	0xa5, 0xa4, 0x56, 0x08, 0x49, 0xeb, 0x61, 0xf1, 0x9d, 0x1e, 0xc4, 0x6b, 0x52, 0xb8, 0x25, 0x8b,
	0x0b, 0x94, 0x18, 0x0c, 0x18, 0x85, 0x5c, 0xb9, 0xd8, 0xc1, 0x4a, 0x13, 0x53, 0x28, 0x31, 0x08,
	0x6a, 0x4c, 0x70, 0x62, 0x59, 0x2a, 0x45, 0xc6, 0xb8, 0x81, 0xfd, 0x15, 0x90, 0x58, 0x92, 0x9c,
	0x41, 0x91, 0x39, 0xee, 0x5c, 0x9c, 0x8e, 0x05, 0x05, 0x2e, 0xa9, 0x39, 0xa9, 0x25, 0x14, 0x39,
	0x28, 0x89, 0x0d, 0x9c, 0x80, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x21, 0xa5, 0x3a,
	0x55, 0x02, 0x00, 0x00,
}
