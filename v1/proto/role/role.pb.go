// Code generated by protoc-gen-go. DO NOT EDIT.
// source: role.proto

/*
Package go_micro_srv_v1_role is a generated protocol buffer package.

It is generated from these files:
	role.proto

It has these top-level messages:
	RoleReq
	RoleRsp
*/
package go_micro_srv_v1_role

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RoleReq struct {
	Id     uint64 `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Desc   string `protobuf:"bytes,3,opt,name=Desc" json:"Desc,omitempty"`
	Status uint64 `protobuf:"varint,4,opt,name=Status" json:"Status,omitempty"`
}

func (m *RoleReq) Reset()                    { *m = RoleReq{} }
func (m *RoleReq) String() string            { return proto.CompactTextString(m) }
func (*RoleReq) ProtoMessage()               {}
func (*RoleReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RoleReq) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RoleReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RoleReq) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *RoleReq) GetStatus() uint64 {
	if m != nil {
		return m.Status
	}
	return 0
}

type RoleRsp struct {
	Id     uint64 `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Desc   string `protobuf:"bytes,3,opt,name=Desc" json:"Desc,omitempty"`
	Status uint64 `protobuf:"varint,4,opt,name=Status" json:"Status,omitempty"`
}

func (m *RoleRsp) Reset()                    { *m = RoleRsp{} }
func (m *RoleRsp) String() string            { return proto.CompactTextString(m) }
func (*RoleRsp) ProtoMessage()               {}
func (*RoleRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RoleRsp) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RoleRsp) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RoleRsp) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *RoleRsp) GetStatus() uint64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*RoleReq)(nil), "go.micro.srv.v1.role.RoleReq")
	proto.RegisterType((*RoleRsp)(nil), "go.micro.srv.v1.role.RoleRsp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Role service

type RoleClient interface {
	RoleIndex(ctx context.Context, in *RoleReq, opts ...client.CallOption) (Role_RoleIndexClient, error)
	RoleRead(ctx context.Context, in *RoleReq, opts ...client.CallOption) (*RoleRsp, error)
	RoleSave(ctx context.Context, in *RoleReq, opts ...client.CallOption) (*RoleRsp, error)
	RolePatch(ctx context.Context, in *RoleReq, opts ...client.CallOption) (*RoleRsp, error)
	RoleDelete(ctx context.Context, in *RoleReq, opts ...client.CallOption) (*RoleRsp, error)
}

type roleClient struct {
	c           client.Client
	serviceName string
}

func NewRoleClient(serviceName string, c client.Client) RoleClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.v1.role"
	}
	return &roleClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *roleClient) RoleIndex(ctx context.Context, in *RoleReq, opts ...client.CallOption) (Role_RoleIndexClient, error) {
	req := c.c.NewRequest(c.serviceName, "Role.RoleIndex", &RoleReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &roleRoleIndexClient{stream}, nil
}

type Role_RoleIndexClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*RoleRsp, error)
}

type roleRoleIndexClient struct {
	stream client.Streamer
}

func (x *roleRoleIndexClient) Close() error {
	return x.stream.Close()
}

func (x *roleRoleIndexClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *roleRoleIndexClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *roleRoleIndexClient) Recv() (*RoleRsp, error) {
	m := new(RoleRsp)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *roleClient) RoleRead(ctx context.Context, in *RoleReq, opts ...client.CallOption) (*RoleRsp, error) {
	req := c.c.NewRequest(c.serviceName, "Role.RoleRead", in)
	out := new(RoleRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) RoleSave(ctx context.Context, in *RoleReq, opts ...client.CallOption) (*RoleRsp, error) {
	req := c.c.NewRequest(c.serviceName, "Role.RoleSave", in)
	out := new(RoleRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) RolePatch(ctx context.Context, in *RoleReq, opts ...client.CallOption) (*RoleRsp, error) {
	req := c.c.NewRequest(c.serviceName, "Role.RolePatch", in)
	out := new(RoleRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) RoleDelete(ctx context.Context, in *RoleReq, opts ...client.CallOption) (*RoleRsp, error) {
	req := c.c.NewRequest(c.serviceName, "Role.RoleDelete", in)
	out := new(RoleRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Role service

type RoleHandler interface {
	RoleIndex(context.Context, *RoleReq, Role_RoleIndexStream) error
	RoleRead(context.Context, *RoleReq, *RoleRsp) error
	RoleSave(context.Context, *RoleReq, *RoleRsp) error
	RolePatch(context.Context, *RoleReq, *RoleRsp) error
	RoleDelete(context.Context, *RoleReq, *RoleRsp) error
}

func RegisterRoleHandler(s server.Server, hdlr RoleHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Role{hdlr}, opts...))
}

type Role struct {
	RoleHandler
}

func (h *Role) RoleIndex(ctx context.Context, stream server.Streamer) error {
	m := new(RoleReq)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.RoleHandler.RoleIndex(ctx, m, &roleRoleIndexStream{stream})
}

type Role_RoleIndexStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*RoleRsp) error
}

type roleRoleIndexStream struct {
	stream server.Streamer
}

func (x *roleRoleIndexStream) Close() error {
	return x.stream.Close()
}

func (x *roleRoleIndexStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *roleRoleIndexStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *roleRoleIndexStream) Send(m *RoleRsp) error {
	return x.stream.Send(m)
}

func (h *Role) RoleRead(ctx context.Context, in *RoleReq, out *RoleRsp) error {
	return h.RoleHandler.RoleRead(ctx, in, out)
}

func (h *Role) RoleSave(ctx context.Context, in *RoleReq, out *RoleRsp) error {
	return h.RoleHandler.RoleSave(ctx, in, out)
}

func (h *Role) RolePatch(ctx context.Context, in *RoleReq, out *RoleRsp) error {
	return h.RoleHandler.RolePatch(ctx, in, out)
}

func (h *Role) RoleDelete(ctx context.Context, in *RoleReq, out *RoleRsp) error {
	return h.RoleHandler.RoleDelete(ctx, in, out)
}

func init() { proto.RegisterFile("role.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 217 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0xca, 0xcf, 0x49,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x49, 0xcf, 0xd7, 0xcb, 0xcd, 0x4c, 0x2e, 0xca,
	0xd7, 0x2b, 0x2e, 0x2a, 0xd3, 0x2b, 0x33, 0xd4, 0x03, 0xc9, 0x29, 0x45, 0x72, 0xb1, 0x07, 0xe5,
	0xe7, 0xa4, 0x06, 0xa5, 0x16, 0x0a, 0xf1, 0x71, 0x31, 0x79, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a,
	0xb0, 0x04, 0x31, 0x79, 0xa6, 0x08, 0x09, 0x71, 0xb1, 0xf8, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x29,
	0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x20, 0x31, 0x97, 0xd4, 0xe2, 0x64, 0x09, 0x66, 0x88, 0x18,
	0x88, 0x2d, 0x24, 0xc6, 0xc5, 0x16, 0x5c, 0x92, 0x58, 0x52, 0x5a, 0x2c, 0xc1, 0x02, 0xd6, 0x0b,
	0xe5, 0xc1, 0x8d, 0x2e, 0x2e, 0xa0, 0xb6, 0xd1, 0x46, 0x1d, 0xcc, 0x5c, 0x2c, 0x20, 0xb3, 0x85,
	0x7c, 0xb9, 0x38, 0x41, 0xb4, 0x67, 0x5e, 0x4a, 0x6a, 0x85, 0x90, 0xac, 0x1e, 0x36, 0x2f, 0xea,
	0x41, 0xfd, 0x27, 0x85, 0x4f, 0xba, 0xb8, 0x40, 0x89, 0xc1, 0x80, 0x51, 0xc8, 0x8b, 0x8b, 0x03,
	0xa2, 0x3a, 0x31, 0x85, 0x52, 0xd3, 0x60, 0x66, 0x05, 0x27, 0x96, 0xa5, 0x52, 0x6c, 0x96, 0x37,
	0xc4, 0x9b, 0x01, 0x89, 0x25, 0xc9, 0x19, 0x14, 0x1b, 0xe6, 0xc3, 0xc5, 0x05, 0xe2, 0xb8, 0xa4,
	0xe6, 0xa4, 0x96, 0x50, 0xec, 0xb4, 0x24, 0x36, 0x70, 0xea, 0x32, 0x06, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x8c, 0xda, 0x8a, 0x21, 0x6b, 0x02, 0x00, 0x00,
}
