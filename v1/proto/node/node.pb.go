// Code generated by protoc-gen-go. DO NOT EDIT.
// source: node.proto

/*
Package go_micro_srv_v1_node is a generated protocol buffer package.

It is generated from these files:
	node.proto

It has these top-level messages:
	NodeReq
	LiAttr
	NodeRsp
*/
package go_micro_srv_v1_node

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NodeReq struct {
	ParentId string `protobuf:"bytes,1,opt,name=parentId" json:"parentId,omitempty"`
	Guid     string `protobuf:"bytes,2,opt,name=guid" json:"guid,omitempty"`
	Type     string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
}

func (m *NodeReq) Reset()                    { *m = NodeReq{} }
func (m *NodeReq) String() string            { return proto.CompactTextString(m) }
func (*NodeReq) ProtoMessage()               {}
func (*NodeReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NodeReq) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *NodeReq) GetGuid() string {
	if m != nil {
		return m.Guid
	}
	return ""
}

func (m *NodeReq) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type LiAttr struct {
	Guid string `protobuf:"bytes,1,opt,name=guid" json:"guid,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
}

func (m *LiAttr) Reset()                    { *m = LiAttr{} }
func (m *LiAttr) String() string            { return proto.CompactTextString(m) }
func (*LiAttr) ProtoMessage()               {}
func (*LiAttr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LiAttr) GetGuid() string {
	if m != nil {
		return m.Guid
	}
	return ""
}

func (m *LiAttr) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type NodeRsp struct {
	Children bool    `protobuf:"varint,1,opt,name=children" json:"children,omitempty"`
	Id       string  `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	LiAttr   *LiAttr `protobuf:"bytes,3,opt,name=li_attr,json=liAttr" json:"li_attr,omitempty"`
	Parent   string  `protobuf:"bytes,4,opt,name=parent" json:"parent,omitempty"`
	Text     string  `protobuf:"bytes,5,opt,name=text" json:"text,omitempty"`
	Type     string  `protobuf:"bytes,6,opt,name=type" json:"type,omitempty"`
}

func (m *NodeRsp) Reset()                    { *m = NodeRsp{} }
func (m *NodeRsp) String() string            { return proto.CompactTextString(m) }
func (*NodeRsp) ProtoMessage()               {}
func (*NodeRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *NodeRsp) GetChildren() bool {
	if m != nil {
		return m.Children
	}
	return false
}

func (m *NodeRsp) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NodeRsp) GetLiAttr() *LiAttr {
	if m != nil {
		return m.LiAttr
	}
	return nil
}

func (m *NodeRsp) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *NodeRsp) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *NodeRsp) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func init() {
	proto.RegisterType((*NodeReq)(nil), "go.micro.srv.v1.node.NodeReq")
	proto.RegisterType((*LiAttr)(nil), "go.micro.srv.v1.node.LiAttr")
	proto.RegisterType((*NodeRsp)(nil), "go.micro.srv.v1.node.NodeRsp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Node service

type NodeClient interface {
	NodeIndex(ctx context.Context, in *NodeReq, opts ...client.CallOption) (*NodeRsp, error)
	NodeChildren(ctx context.Context, in *NodeReq, opts ...client.CallOption) (Node_NodeChildrenClient, error)
	NodeRead(ctx context.Context, in *NodeReq, opts ...client.CallOption) (*NodeRsp, error)
	NodeSave(ctx context.Context, in *NodeReq, opts ...client.CallOption) (*NodeRsp, error)
	NodePatch(ctx context.Context, in *NodeReq, opts ...client.CallOption) (*NodeRsp, error)
	NodeDelete(ctx context.Context, in *NodeReq, opts ...client.CallOption) (*NodeRsp, error)
}

type nodeClient struct {
	c           client.Client
	serviceName string
}

func NewNodeClient(serviceName string, c client.Client) NodeClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.v1.node"
	}
	return &nodeClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *nodeClient) NodeIndex(ctx context.Context, in *NodeReq, opts ...client.CallOption) (*NodeRsp, error) {
	req := c.c.NewRequest(c.serviceName, "Node.NodeIndex", in)
	out := new(NodeRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) NodeChildren(ctx context.Context, in *NodeReq, opts ...client.CallOption) (Node_NodeChildrenClient, error) {
	req := c.c.NewRequest(c.serviceName, "Node.NodeChildren", &NodeReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &nodeNodeChildrenClient{stream}, nil
}

type Node_NodeChildrenClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*NodeRsp, error)
}

type nodeNodeChildrenClient struct {
	stream client.Streamer
}

func (x *nodeNodeChildrenClient) Close() error {
	return x.stream.Close()
}

func (x *nodeNodeChildrenClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *nodeNodeChildrenClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *nodeNodeChildrenClient) Recv() (*NodeRsp, error) {
	m := new(NodeRsp)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) NodeRead(ctx context.Context, in *NodeReq, opts ...client.CallOption) (*NodeRsp, error) {
	req := c.c.NewRequest(c.serviceName, "Node.NodeRead", in)
	out := new(NodeRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) NodeSave(ctx context.Context, in *NodeReq, opts ...client.CallOption) (*NodeRsp, error) {
	req := c.c.NewRequest(c.serviceName, "Node.NodeSave", in)
	out := new(NodeRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) NodePatch(ctx context.Context, in *NodeReq, opts ...client.CallOption) (*NodeRsp, error) {
	req := c.c.NewRequest(c.serviceName, "Node.NodePatch", in)
	out := new(NodeRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) NodeDelete(ctx context.Context, in *NodeReq, opts ...client.CallOption) (*NodeRsp, error) {
	req := c.c.NewRequest(c.serviceName, "Node.NodeDelete", in)
	out := new(NodeRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Node service

type NodeHandler interface {
	NodeIndex(context.Context, *NodeReq, *NodeRsp) error
	NodeChildren(context.Context, *NodeReq, Node_NodeChildrenStream) error
	NodeRead(context.Context, *NodeReq, *NodeRsp) error
	NodeSave(context.Context, *NodeReq, *NodeRsp) error
	NodePatch(context.Context, *NodeReq, *NodeRsp) error
	NodeDelete(context.Context, *NodeReq, *NodeRsp) error
}

func RegisterNodeHandler(s server.Server, hdlr NodeHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Node{hdlr}, opts...))
}

type Node struct {
	NodeHandler
}

func (h *Node) NodeIndex(ctx context.Context, in *NodeReq, out *NodeRsp) error {
	return h.NodeHandler.NodeIndex(ctx, in, out)
}

func (h *Node) NodeChildren(ctx context.Context, stream server.Streamer) error {
	m := new(NodeReq)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.NodeHandler.NodeChildren(ctx, m, &nodeNodeChildrenStream{stream})
}

type Node_NodeChildrenStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*NodeRsp) error
}

type nodeNodeChildrenStream struct {
	stream server.Streamer
}

func (x *nodeNodeChildrenStream) Close() error {
	return x.stream.Close()
}

func (x *nodeNodeChildrenStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *nodeNodeChildrenStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *nodeNodeChildrenStream) Send(m *NodeRsp) error {
	return x.stream.Send(m)
}

func (h *Node) NodeRead(ctx context.Context, in *NodeReq, out *NodeRsp) error {
	return h.NodeHandler.NodeRead(ctx, in, out)
}

func (h *Node) NodeSave(ctx context.Context, in *NodeReq, out *NodeRsp) error {
	return h.NodeHandler.NodeSave(ctx, in, out)
}

func (h *Node) NodePatch(ctx context.Context, in *NodeReq, out *NodeRsp) error {
	return h.NodeHandler.NodePatch(ctx, in, out)
}

func (h *Node) NodeDelete(ctx context.Context, in *NodeReq, out *NodeRsp) error {
	return h.NodeHandler.NodeDelete(ctx, in, out)
}

func init() { proto.RegisterFile("node.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xc1, 0x4a, 0xfc, 0x30,
	0x10, 0xc6, 0xff, 0xed, 0xf6, 0xdf, 0xed, 0x8e, 0xe2, 0x21, 0x88, 0x94, 0x45, 0x41, 0x7a, 0xf2,
	0x14, 0xd6, 0x15, 0x1f, 0x40, 0xf4, 0xb2, 0xba, 0xca, 0x52, 0x1f, 0x40, 0x6a, 0x33, 0xec, 0x06,
	0x6a, 0x53, 0xd3, 0xb1, 0xd4, 0x77, 0xf2, 0x81, 0x7c, 0x1c, 0x49, 0x1a, 0xab, 0x87, 0xe2, 0xa5,
	0xa7, 0xe6, 0x9b, 0xf4, 0xfb, 0xe6, 0x37, 0x03, 0x01, 0x28, 0x95, 0x40, 0x5e, 0x69, 0x45, 0x8a,
	0x1d, 0x6e, 0x15, 0x7f, 0x91, 0xb9, 0x56, 0xbc, 0xd6, 0x0d, 0x6f, 0xce, 0xb9, 0xb9, 0x4b, 0xee,
	0x61, 0xfa, 0xa0, 0x04, 0xa6, 0xf8, 0xca, 0xe6, 0x10, 0x55, 0x99, 0xc6, 0x92, 0x56, 0x22, 0xf6,
	0x4e, 0xbd, 0xb3, 0x59, 0xda, 0x6b, 0xc6, 0x20, 0xd8, 0xbe, 0x49, 0x11, 0xfb, 0xb6, 0x6e, 0xcf,
	0xa6, 0x46, 0xef, 0x15, 0xc6, 0x93, 0xae, 0x66, 0xce, 0xc9, 0x02, 0xc2, 0xb5, 0xbc, 0x22, 0xd2,
	0xbd, 0xc3, 0x1b, 0x70, 0xf8, 0xbf, 0x1c, 0x1f, 0x9e, 0x23, 0xa8, 0x2b, 0x43, 0x90, 0xef, 0x64,
	0x21, 0x34, 0x96, 0xd6, 0x17, 0xa5, 0xbd, 0x66, 0x07, 0xe0, 0xf7, 0xfd, 0x7d, 0x29, 0xd8, 0x25,
	0x4c, 0x0b, 0xf9, 0x94, 0x11, 0x69, 0x0b, 0xb0, 0xb7, 0x3c, 0xe6, 0x43, 0x03, 0xf2, 0x0e, 0x27,
	0x0d, 0x8b, 0x0e, 0xeb, 0x08, 0xc2, 0x6e, 0xa8, 0x38, 0xb0, 0x51, 0x4e, 0x59, 0x34, 0x6c, 0x29,
	0xfe, 0xef, 0xd0, 0xb0, 0xa5, 0x1e, 0x37, 0xfc, 0xc1, 0x5d, 0x7e, 0x4e, 0x20, 0x30, 0xb8, 0xec,
	0x0e, 0x66, 0xe6, 0xbb, 0x2a, 0x05, 0xb6, 0xec, 0x64, 0xb8, 0xb7, 0xdb, 0xec, 0xfc, 0xaf, 0xeb,
	0xba, 0x4a, 0xfe, 0xb1, 0x0d, 0xec, 0x1b, 0x71, 0xfd, 0x3d, 0xec, 0xc8, 0xbc, 0x85, 0xc7, 0x6e,
	0x21, 0xea, 0xfe, 0xce, 0xc4, 0x68, 0x3a, 0x97, 0xf5, 0x98, 0x35, 0x38, 0x3a, 0xcb, 0xad, 0x6d,
	0x93, 0x51, 0xbe, 0x1b, 0x1d, 0xb6, 0x06, 0x30, 0xe2, 0x06, 0x0b, 0xa4, 0xd1, 0x68, 0xcf, 0xa1,
	0x7d, 0x27, 0x17, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xdc, 0x19, 0x1e, 0x35, 0x03, 0x00,
	0x00,
}
